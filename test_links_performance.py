"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –∑–∞–¥–∞—á.
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–∞—á–∫–∏ –∏–∑ 50 –∑–∞–¥–∞—á.
"""

import time
from typing import Dict, List

from radiator.core.database import SessionLocal
from radiator.core.logging import logger
from radiator.models.tracker import TrackerTask
from radiator.services.tracker_service import TrackerAPIService


def test_1_single_requests(
    tracker_service: TrackerAPIService, task_keys: List[str]
) -> None:
    """–¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏")
    print("=" * 80)

    start_time = time.time()
    results = {}

    for i, task_key in enumerate(task_keys[:5], 1):  # –¢–æ–ª—å–∫–æ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
        try:
            print(f"  [{i}/5] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è {task_key}...")
            links = tracker_service.get_task_links(task_key)
            results[task_key] = links
            print(f"       –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(links) if links else 0}")
        except Exception as e:
            print(f"       –û—à–∏–±–∫–∞: {e}")
            results[task_key] = None

    elapsed = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
    print(
        f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–≤—è–∑–µ–π –¥–ª—è {len([r for r in results.values() if r is not None])} –∑–∞–¥–∞—á"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_links = sum(len(links) for links in results.values() if links)
    print(f"üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {total_links}")

    return results


def test_2_batch_parallel(
    tracker_service: TrackerAPIService, task_keys: List[str]
) -> None:
    """–¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —á–µ—Ä–µ–∑ ThreadPoolExecutor"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ batch-–∑–∞–ø—Ä–æ—Å—ã")
    print("=" * 80)

    start_time = time.time()

    try:
        print(f"  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è {len(task_keys)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        results = tracker_service.get_task_links_batch(task_keys)

        elapsed = time.time() - start_time
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–≤—è–∑–µ–π –¥–ª—è {len(results)} –∑–∞–¥–∞—á")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_links = sum(len(links) for links in results.values() if links)
        fullstack_links = 0

        for task_key, links in results.items():
            if links:
                fs_links = [
                    l
                    for l in links
                    if (
                        l.get("object", {}).get("queue", {}).get("key") == "FULLSTACK"
                        and l.get("type", {}).get("id") == "relates"
                        and l.get("direction") == "outward"
                    )
                ]
                fullstack_links += len(fs_links)

                if fs_links:
                    print(f"  {task_key}: {len(fs_links)} FULLSTACK —Å–≤—è–∑–µ–π")

        print(f"\nüîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {total_links}")
        print(f"üéØ FULLSTACK relates —Å–≤—è–∑–µ–π: {fullstack_links}")

        return results

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return None


def test_3_expand_parameter(
    tracker_service: TrackerAPIService, task_keys: List[str]
) -> None:
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ expand=links –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand=links –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
    print("=" * 80)

    test_key = task_keys[0]
    print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–¥–∞—á–µ: {test_key}")

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ 1: expand=links
        print(f"\n  –ü–æ–ø—ã—Ç–∫–∞ 1: GET /v2/issues/{test_key}?expand=links")
        url = f"{tracker_service.base_url}issues/{test_key}"
        response = tracker_service._make_request(url, params={"expand": "links"})
        task_data = response.json()

        if "links" in task_data:
            print(f"  ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä expand=links –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø!")
            print(f"  üîó –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(task_data['links'])}")
            return True
        else:
            print(
                f"  ‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä expand=links –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–ø–æ–ª–µ 'links' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
            )
            print(f"  üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(task_data.keys())[:10]}...")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

    return False


def test_4_search_with_expand(tracker_service: TrackerAPIService) -> None:
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand –≤ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand –≤ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ _search")
    print("=" * 80)

    try:
        # –ü–æ–∏—Å–∫ —Å expand
        print(f"  POST /v2/issues/_search?expand=links")
        url = f"{tracker_service.base_url}issues/_search"
        params = {"expand": "links", "perPage": 5}
        post_data = {"filter": {"queue": "CPO"}}

        response = tracker_service._make_request(
            url, method="POST", json=post_data, params=params
        )
        results = response.json()

        if results and len(results) > 0:
            first_task = results[0]
            if "links" in first_task:
                print(f"  ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä expand=links –≤ –ø–æ–∏—Å–∫–µ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø!")
                print(
                    f"  üîó –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç {len(first_task.get('links', []))} —Å–≤—è–∑–µ–π"
                )
                return True
            else:
                print(f"  ‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä expand=links –≤ –ø–æ–∏—Å–∫–µ –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                print(f"  üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(first_task.keys())[:10]}...")
        else:
            print(f"  ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "üöÄ" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –°–í–Ø–ó–ï–ô –ó–ê–î–ê–ß")
    print("üöÄ" * 40)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    db = SessionLocal()
    tracker_service = TrackerAPIService()

    # –ü–æ–ª—É—á–∏—Ç—å 50 –∑–∞–¥–∞—á CPO –∏–∑ –±–∞–∑—ã
    cpo_tasks = (
        db.query(TrackerTask.key).filter(TrackerTask.key.like("CPO%")).limit(50).all()
    )
    task_keys = [t[0] for t in cpo_tasks]

    print(f"\nüìù –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ {len(task_keys)} –∑–∞–¥–∞—á–∞—Ö CPO")
    print(f"   –ü—Ä–∏–º–µ—Ä—ã: {task_keys[:5]}")

    try:
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Å–Ω–∞—á–∞–ª–∞, —Ç.–∫. –±—ã—Å—Ç—Ä—ã–π)
        expand_supported = test_3_expand_parameter(tracker_service, task_keys)

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand –≤ –ø–æ–∏—Å–∫–µ
        search_expand_supported = test_4_search_with_expand(tracker_service)

        # –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ 5 –∑–∞–¥–∞—á)
        # test_1_single_requests(tracker_service, task_keys[:5])

        # –¢–µ—Å—Ç 2: Batch –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        batch_results = test_2_batch_parallel(tracker_service, task_keys)

        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 80)

        if expand_supported or search_expand_supported:
            print("‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç expand=links")
            print("   ‚Üí –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–≤—è–∑–∏ –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            print("   ‚Üí –≠—Ç–æ —É–º–µ–Ω—å—à–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
        else:
            print("‚ùå API –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç expand=links")
            print("   ‚Üí –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π")

        print("\nüí° –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        print("   1. –ü—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—É—á–∞—Ç—å —Å–≤—è–∑–∏ batch-–∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)")
        print("   2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤—è–∑–∏ –≤ –ë–î")
        print("   3. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: —á–∏—Ç–∞—Ç—å —Å–≤—è–∑–∏ –∏–∑ –ë–î (0 API –∑–∞–ø—Ä–æ—Å–æ–≤)")
        print("   4. –û–±–Ω–æ–≤–ª—è—Ç—å —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        if batch_results:
            print(f"\nüìà –î–ª—è 50 –∑–∞–¥–∞—á CPO:")
            print(f"   - Batch –∑–∞–ø—Ä–æ—Å—ã: ~5-10 —Å–µ–∫—É–Ω–¥")
            print(f"   - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ: ~50-100 —Å–µ–∫—É–Ω–¥ (–≤ 10 —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
            print(f"   - –ß—Ç–µ–Ω–∏–µ –∏–∑ –ë–î: < 1 —Å–µ–∫—É–Ω–¥–∞")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        db.close()

    print("\n" + "üèÅ" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("üèÅ" * 40 + "\n")


if __name__ == "__main__":
    main()
