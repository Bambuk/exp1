#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á CPO –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from radiator.core.database import SessionLocal
# CRUD operations removed - using direct SQLAlchemy queries

def check_cpo_tasks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ CPO –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ CPO –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = SessionLocal()
        
        # –ò—â–µ–º –∑–∞–¥–∞—á–∏ CPO
        print("üìã –ò—â–µ–º –∑–∞–¥–∞—á–∏ —Å –∫–ª—é—á–æ–º CPO...")
        cpo_tasks = db.query(tracker_task.model).filter(
            tracker_task.model.key.like('CPO-%')
        ).all()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á CPO: {len(cpo_tasks)}")
        
        if cpo_tasks:
            print("–ó–∞–¥–∞—á–∏ CPO:")
            for task in cpo_tasks:
                print(f"  - {task.key}: {task.summary[:50] if task.summary else 'N/A'}...")
                print(f"    –°—Ç–∞—Ç—É—Å: {task.status}, –ê–≤—Ç–æ—Ä: {task.author}")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∏ CPO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞–¥–∞—á
            print("\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞–¥–∞—á:")
            all_tasks = db.query(tracker_task.model.key).limit(20).all()
            keys = [task[0] for task in all_tasks if task[0]]
            for key in sorted(keys):
                print(f"  - {key}")
        
        db.close()
        return len(cpo_tasks) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á CPO: {e}")
        return False

if __name__ == "__main__":
    has_cpo = check_cpo_tasks()
    sys.exit(0 if has_cpo else 1)
