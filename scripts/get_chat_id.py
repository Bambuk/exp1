#!/usr/bin/env python3
"""Script to get Chat ID from Telegram bot."""

import asyncio
import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# Load environment variables
load_dotenv()

class ChatIDBot:
    """Simple bot to get chat ID."""
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            sys.exit(1)
        
        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup bot command handlers."""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("chatid", self.chatid_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        chat = update.effective_chat
        user = update.effective_user
        
        message = f"""ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID.

üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
‚Ä¢ Chat ID: `{chat.id}`
‚Ä¢ –¢–∏–ø —á–∞—Ç–∞: {chat.type}
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or chat.first_name or chat.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
‚Ä¢ User ID: `{user.id}`
‚Ä¢ –ò–º—è: {user.first_name}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_USER_ID –≤ —Ñ–∞–π–ª–µ .env
"""
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def chatid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /chatid command."""
        chat = update.effective_chat
        await update.message.reply_text(
            f"üÜî Chat ID: `{chat.id}`\n"
            f"üìù –¢–∏–ø: {chat.type}",
            parse_mode='Markdown'
        )
    
    async def echo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Echo all messages with chat info."""
        chat = update.effective_chat
        user = update.effective_user
        
        await update.message.reply_text(
            f"üí¨ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}\n\n"
            f"üÜî Chat ID: `{chat.id}`\n"
            f"üë§ User ID: `{user.id}`"
        )
    
    async def run(self):
        """Run the bot."""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID...")
        print("üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @{} –≤ Telegram".format(
            (await self.application.bot.get_me()).username
        ))
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /chatid")
        print("üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """Main function."""
    bot = ChatIDBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
