#!/usr/bin/env pwsh
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Alembic

.DESCRIPTION
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic

.PARAMETER Command
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (status, history, create, upgrade, downgrade, reset)

.PARAMETER Message
    –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π create)

.EXAMPLE
    .\migrate.ps1 status
    .\migrate.ps1 create "Add new field"
    .\migrate.ps1 upgrade
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("status", "history", "create", "upgrade", "downgrade", "reset")]
    [string]$Command,
    
    [Parameter(Mandatory=$false)]
    [string]$Message
)

function Show-Status {
    Write-Host "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:" -ForegroundColor Green
    alembic current
}

function Show-History {
    Write-Host "üìö –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:" -ForegroundColor Green
    alembic history
}

function Create-Migration {
    param([string]$MigrationMessage)
    
    if ([string]::IsNullOrEmpty($MigrationMessage)) {
        $MigrationMessage = Read-Host "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"
    }
    
    Write-Host "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: $MigrationMessage" -ForegroundColor Yellow
    alembic revision --autogenerate -m $MigrationMessage
}

function Upgrade-Migrations {
    Write-Host "‚¨ÜÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..." -ForegroundColor Yellow
    alembic upgrade head
}

function Downgrade-Migration {
    Write-Host "‚¨áÔ∏è –û—Ç–∫–∞—Ç –Ω–∞ –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–∑–∞–¥..." -ForegroundColor Yellow
    alembic downgrade -1
}

function Reset-Migrations {
    Write-Host "üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π..." -ForegroundColor Red
    $confirmation = Read-Host "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏? (y/N)"
    if ($confirmation -eq 'y' -or $confirmation -eq 'Y') {
        alembic downgrade base
    } else {
        Write-Host "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" -ForegroundColor Yellow
    }
}

function Show-Help {
    Write-Host @"
üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏:

  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
  history    - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
  create     - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
  upgrade    - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  downgrade  - –û—Ç–∫–∞—Ç–∏—Ç—å –Ω–∞ –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–∑–∞–¥
  reset      - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  .\migrate.ps1 status
  .\migrate.ps1 create "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ"
  .\migrate.ps1 upgrade
  .\migrate.ps1 downgrade
"@ -ForegroundColor Cyan
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
switch ($Command) {
    "status" { Show-Status }
    "history" { Show-History }
    "create" { Create-Migration -MigrationMessage $Message }
    "upgrade" { Upgrade-Migrations }
    "downgrade" { Downgrade-Migration }
    "reset" { Reset-Migrations }
    default { Show-Help }
}
