#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π API Tracker –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ fields.

–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ñ–∞–π–ª –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä fields.
"""

import json
import sys
from pathlib import Path
from typing import Any, Dict, List, Set

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from radiator.core.config import settings
from radiator.core.logging import logger
from radiator.services.tracker_service import tracker_service


def extract_all_fields_from_tasks(tasks: List[Dict[str, Any]]) -> Set[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.

    Args:
        tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ API

    Returns:
        –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    """
    all_fields = set()

    for task in tasks:
        if isinstance(task, dict):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            for field_name in task.keys():
                all_fields.add(field_name)

    return all_fields


def save_fields_to_file(fields: Set[str], file_path: Path) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—è –≤ —Ñ–∞–π–ª, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.

    Args:
        fields: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    file_path.parent.mkdir(parents=True, exist_ok=True)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_fields = sorted(fields)

    with open(file_path, "w", encoding="utf-8") as f:
        for field in sorted_fields:
            f.write(f"{field}\n")

    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sorted_fields)} –ø–æ–ª–µ–π –≤ {file_path}")


def load_fields_from_file(file_path: Path) -> List[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—è–º–∏

    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    """
    if not file_path.exists():
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

    with open(file_path, "r", encoding="utf-8") as f:
        fields = [line.strip() for line in f if line.strip()]

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fields)} –ø–æ–ª–µ–π –∏–∑ {file_path}")
    return fields


def analyze_api_fields():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—è API Tracker –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ñ–∞–π–ª.
    """
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π API Tracker...")

    try:
        # –î–µ–ª–∞–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 –∑–∞–¥–∞—á
        logger.info(
            "üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–æ–º 'Queue: CPO Updated: >=2025-10-10'..."
        )

        url = f"{tracker_service.base_url}issues/_search"
        post_data = {"query": "Queue: CPO Updated: >=2025-10-10"}
        params = {"perPage": 10, "page": 1, "expand": "links"}

        response = tracker_service._make_request(
            url, method="POST", json=post_data, params=params
        )

        data = response.json()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        tasks = tracker_service._extract_tasks_from_response(data)
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")

        if not tasks:
            logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        all_fields = extract_all_fields_from_tasks(tasks)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_fields)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:")
        for field in sorted(all_fields):
            logger.info(f"  - {field}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è –≤ —Ñ–∞–π–ª
        fields_file = project_root / "data" / "config" / "fields.txt"
        save_fields_to_file(all_fields, fields_file)

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ª–µ–π: {e}")
        import traceback

        logger.error(f"üìç Stacktrace: {traceback.format_exc()}")
        return False


def test_fields_parameter():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä fields —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º customer.
    """
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä fields...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
        fields_file = project_root / "data" / "config" / "fields.txt"
        fields = load_fields_from_file(fields_file)

        if not fields:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞")
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ customer
        fields_with_customer = fields + ["customer"]
        fields_string = ",".join(fields_with_customer)

        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—è–º–∏: {fields_string}")

        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º fields
        url = f"{tracker_service.base_url}issues/_search"
        post_data = {"query": "Queue: CPO Updated: >=2025-10-10"}
        params = {"perPage": 1, "page": 1, "expand": "links", "fields": fields_string}

        logger.info("üì• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º fields...")
        response = tracker_service._make_request(
            url, method="POST", json=post_data, params=params
        )

        data = response.json()
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º fields")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        tasks = tracker_service._extract_tasks_from_response(data)

        if not tasks:
            logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")
            return False

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        task = tasks[0]
        response_fields = set(task.keys())

        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"  - –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª–µ–π: {len(fields_with_customer)}")
        logger.info(f"  - –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–µ–π: {len(response_fields)}")
        logger.info(f"  - –ü–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {sorted(response_fields)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ customer –Ω–µ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if "customer" in response_fields:
            logger.info("‚úÖ –ü–æ–ª–µ 'customer' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            customer_value = task.get("customer")
            logger.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ customer: {customer_value}")
        else:
            logger.info(
                "‚ÑπÔ∏è –ü–æ–ª–µ 'customer' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö)"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        expected_fields = set(fields)
        missing_fields = expected_fields - response_fields
        extra_fields = response_fields - expected_fields - {"customer"}

        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: {sorted(missing_fields)}")
        else:
            logger.info("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        if extra_fields:
            logger.info(f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {sorted(extra_fields)}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ fields: {e}")
        import traceback

        logger.error(f"üìç Stacktrace: {traceback.format_exc()}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    import logging

    logging.basicConfig(level=logging.INFO, format="%(message)s")

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π API Tracker")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.TRACKER_API_TOKEN:
        logger.error("‚ùå TRACKER_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(1)

    if not settings.TRACKER_ORG_ID:
        logger.error("‚ùå TRACKER_ORG_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(1)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
    if not analyze_api_fields():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è")
        sys.exit(1)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä fields
    if not test_fields_parameter():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä fields")
        sys.exit(1)

    logger.info("üéâ –ê–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
