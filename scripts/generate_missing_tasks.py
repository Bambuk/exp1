#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""

import sys
from pathlib import Path

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from radiator.core.config import settings
from radiator.models.tracker import TrackerTask


def generate_missing_tasks(keys_file: str, output_file: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""

    # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
    print(f"üìñ –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ {keys_file}...")
    with open(keys_file, "r") as f:
        all_keys = [line.strip() for line in f if line.strip()]

    print(f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–µ: {len(all_keys)}")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL)
    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    sync_url = settings.DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")
    engine = create_engine(sync_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

    with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        existing_keys_query = (
            db.query(TrackerTask.key).filter(TrackerTask.key.in_(all_keys)).all()
        )

        existing_keys = {row[0] for row in existing_keys_query}
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: {len(existing_keys)} –∑–∞–¥–∞—á")

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
        missing_keys = set(all_keys) - existing_keys
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ: {len(missing_keys)} –∑–∞–¥–∞—á")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ {output_file}...")
        with open(output_file, "w") as f:
            for key in sorted(missing_keys):
                f.write(f"{key}\n")

        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {output_file} —Å {len(missing_keys)} –∑–∞–¥–∞—á–∞–º–∏")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {len(all_keys)}")
        print(f"   –ï—Å—Ç—å –≤ –±–∞–∑–µ: {len(existing_keys)}")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_keys)}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö: {len(existing_keys)/len(all_keys)*100:.1f}%")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        batch_size = 200
        total_batches = (len(missing_keys) + batch_size - 1) // batch_size
        print(f"\nüîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {total_batches}")
        print(f"   –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ): {total_batches * 2.5 / 60:.1f} —á–∞—Å–æ–≤")


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python generate_missing_tasks.py <–≤—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª> <–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª>"
        )
        print(
            "–ü—Ä–∏–º–µ—Ä: python generate_missing_tasks.py data/input/fs_ids.txt data/input/missing_tasks.txt"
        )
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]

    if not Path(input_file).exists():
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)

    generate_missing_tasks(input_file, output_file)
