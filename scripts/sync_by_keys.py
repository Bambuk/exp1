#!/usr/bin/env python3
"""Script for batch syncing tracker tasks by keys from file."""

import argparse
import hashlib
import re
import subprocess
import sys
from pathlib import Path
from typing import List, Optional, Tuple

from tqdm import tqdm

# Progress tracking
PROGRESS_DIR = Path("data/.progress")


def get_progress_file_path(keys_file: str) -> Path:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º hash –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
    file_hash = hashlib.md5(Path(keys_file).absolute().as_posix().encode()).hexdigest()[
        :8
    ]
    filename = f"{Path(keys_file).name}.{file_hash}.progress"
    return PROGRESS_DIR / filename


def save_progress(keys_file: str, batch_index: int, total_batches: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    PROGRESS_DIR.mkdir(exist_ok=True)
    progress_file = get_progress_file_path(keys_file)
    with open(progress_file, "w") as f:
        f.write(f"{batch_index}\n{total_batches}\n")


def load_progress(keys_file: str) -> Optional[Tuple[int, int]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (batch_index, total_batches) –∏–ª–∏ None"""
    progress_file = get_progress_file_path(keys_file)
    if not progress_file.exists():
        return None
    with open(progress_file, "r") as f:
        lines = f.readlines()
        if len(lines) >= 2:
            return int(lines[0].strip()), int(lines[1].strip())
    return None


def clear_progress(keys_file: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    progress_file = get_progress_file_path(keys_file)
    if progress_file.exists():
        progress_file.unlink()


def read_keys_from_file(filepath: str) -> List[str]:
    """–ß–∏—Ç–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    with open(filepath, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    keys = [line.strip() for line in lines if line.strip()]
    return keys


def validate_key(key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: QUEUE-NUMBER."""
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –±—É–∫–≤—ã-—Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å, —Ü–∏—Ñ—Ä—ã
    pattern = r"^[A-Za-z0-9]+-\d+$"
    return bool(re.match(pattern, key))


def split_into_batches(keys: List[str], batch_size: int) -> List[List[str]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –Ω–∞ –±–∞—Ç—á–∏."""
    batches = []
    for i in range(0, len(keys), batch_size):
        batch = keys[i : i + batch_size]
        batches.append(batch)
    return batches


def build_sync_command(
    keys: List[str], skip_history: bool, limit: Optional[int]
) -> List[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è subprocess."""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∫–ª—é—á–∞–º–∏
    filter_value = f"Key: {', '.join(keys)}"

    cmd = ["python", "-m", "radiator.commands.sync_tracker", "--filter", filter_value]

    if skip_history:
        cmd.append("--skip-history")

    if limit is not None:
        cmd.extend(["--limit", str(limit)])

    return cmd


def sync_batch(keys: List[str], skip_history: bool, limit: Optional[int]) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    cmd = build_sync_command(keys, skip_history, limit)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ capture_output, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ sync-tracker –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    result = subprocess.run(cmd)

    if result.returncode != 0:
        raise RuntimeError(f"Batch sync failed with return code {result.returncode}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å argparse."""
    parser = argparse.ArgumentParser(
        description="Sync tracker tasks by keys from file in batches"
    )
    parser.add_argument(
        "--file", "-f", required=True, help="Path to file with task keys (one per line)"
    )
    parser.add_argument(
        "--batch-size",
        "-b",
        type=int,
        default=200,
        help="Batch size for syncing (default: 200)",
    )
    parser.add_argument(
        "--skip-history", action="store_true", help="Skip history when syncing"
    )
    parser.add_argument("--limit", type=int, help="Limit number of tasks to sync")
    parser.add_argument(
        "--reset-progress",
        action="store_true",
        help="Reset progress and start from beginning",
    )

    args = parser.parse_args()

    try:
        # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        print(f"üìñ Reading keys from {args.file}...")
        keys = read_keys_from_file(args.file)

        if not keys:
            print("‚ùå No keys found in file")
            sys.exit(1)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏
        print("üîç Validating keys...")
        invalid_keys = [key for key in keys if not validate_key(key)]
        if invalid_keys:
            print(f"‚ùå Invalid key format found: {invalid_keys}")
            sys.exit(1)

        print(f"‚úÖ Found {len(keys)} valid keys")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        batches = split_into_batches(keys, args.batch_size)
        print(f"üì¶ Split into {len(batches)} batches of max {args.batch_size} keys")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if args.reset_progress:
            clear_progress(args.file)
            print("üîÑ Progress reset")
            start_batch = 0
        else:
            progress = load_progress(args.file)
            if progress:
                saved_batch, saved_total = progress
                print(f"üìå Found saved progress: batch {saved_batch}/{saved_total}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if saved_total == len(batches):
                    start_batch = saved_batch
                    print(f"‚ñ∂Ô∏è  Continuing from batch {start_batch + 1}")
                else:
                    print(
                        f"‚ö†Ô∏è  Batch count changed ({saved_total} ‚Üí {len(batches)}), starting from beginning"
                    )
                    start_batch = 0
            else:
                start_batch = 0

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∏–Ω–∞—è —Å start_batch
        print("üîÑ Starting batch sync...")

        for i in range(start_batch, len(batches)):
            batch = batches[i]
            batch_num = i + 1
            total_batches = len(batches)

            print(
                f"\nüì¶ Processing batch {batch_num}/{total_batches} ({len(batch)} keys)..."
            )

            try:
                sync_batch(batch, args.skip_history, args.limit)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∞—Ç—á–∞
                save_progress(args.file, i + 1, len(batches))
                print(f"‚úÖ Batch {batch_num} completed successfully")
            except RuntimeError as e:
                print(f"‚ùå Batch {batch_num} failed: {e}")
                print(f"üíæ Progress saved. Run again to continue from batch {batch_num}")
                sys.exit(1)

        # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ - —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        clear_progress(args.file)
        print(f"\nüéâ All {len(batches)} batches completed successfully!")

    except FileNotFoundError:
        print(f"‚ùå File not found: {args.file}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
