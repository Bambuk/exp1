#!/usr/bin/env python3
"""Script for batch syncing tracker tasks by keys from file."""

import argparse
import re
import subprocess
import sys
from pathlib import Path
from typing import List, Optional

from tqdm import tqdm


def read_keys_from_file(filepath: str) -> List[str]:
    """–ß–∏—Ç–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    with open(filepath, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    keys = [line.strip() for line in lines if line.strip()]
    return keys


def validate_key(key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: QUEUE-NUMBER."""
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –±—É–∫–≤—ã-—Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å, —Ü–∏—Ñ—Ä—ã
    pattern = r"^[A-Za-z0-9]+-\d+$"
    return bool(re.match(pattern, key))


def split_into_batches(keys: List[str], batch_size: int) -> List[List[str]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –Ω–∞ –±–∞—Ç—á–∏."""
    batches = []
    for i in range(0, len(keys), batch_size):
        batch = keys[i : i + batch_size]
        batches.append(batch)
    return batches


def build_sync_command(
    keys: List[str], skip_history: bool, limit: Optional[int]
) -> List[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è subprocess."""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∫–ª—é—á–∞–º–∏
    filter_value = f"Key: {', '.join(keys)}"

    cmd = ["python", "-m", "radiator.commands.sync_tracker", "--filter", filter_value]

    if skip_history:
        cmd.append("--skip-history")

    if limit is not None:
        cmd.extend(["--limit", str(limit)])

    return cmd


def sync_batch(keys: List[str], skip_history: bool, limit: Optional[int]) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    cmd = build_sync_command(keys, skip_history, limit)

    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode != 0:
        error_msg = f"Batch sync failed with return code {result.returncode}"
        if result.stderr:
            error_msg += f"\nError: {result.stderr}"
        raise RuntimeError(error_msg)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å argparse."""
    parser = argparse.ArgumentParser(
        description="Sync tracker tasks by keys from file in batches"
    )
    parser.add_argument(
        "--file", "-f", required=True, help="Path to file with task keys (one per line)"
    )
    parser.add_argument(
        "--batch-size",
        "-b",
        type=int,
        default=200,
        help="Batch size for syncing (default: 200)",
    )
    parser.add_argument(
        "--skip-history", action="store_true", help="Skip history when syncing"
    )
    parser.add_argument("--limit", type=int, help="Limit number of tasks to sync")

    args = parser.parse_args()

    try:
        # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        print(f"üìñ Reading keys from {args.file}...")
        keys = read_keys_from_file(args.file)

        if not keys:
            print("‚ùå No keys found in file")
            sys.exit(1)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏
        print("üîç Validating keys...")
        invalid_keys = [key for key in keys if not validate_key(key)]
        if invalid_keys:
            print(f"‚ùå Invalid key format found: {invalid_keys}")
            sys.exit(1)

        print(f"‚úÖ Found {len(keys)} valid keys")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        batches = split_into_batches(keys, args.batch_size)
        print(f"üì¶ Split into {len(batches)} batches of max {args.batch_size} keys")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–∞—Ç—á
        print("üîÑ Starting batch sync...")

        for i, batch in enumerate(tqdm(batches, desc="Syncing batches")):
            batch_num = i + 1
            total_batches = len(batches)

            print(
                f"\nüì¶ Processing batch {batch_num}/{total_batches} ({len(batch)} keys)..."
            )

            try:
                sync_batch(batch, args.skip_history, args.limit)
                print(f"‚úÖ Batch {batch_num} completed successfully")
            except RuntimeError as e:
                print(f"‚ùå Batch {batch_num} failed: {e}")
                print(
                    f"üõë Stopping sync. Processed {batch_num - 1}/{total_batches} batches"
                )
                sys.exit(1)

        print(f"\nüéâ All {len(batches)} batches completed successfully!")

    except FileNotFoundError:
        print(f"‚ùå File not found: {args.file}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
