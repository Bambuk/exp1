"""
Standalone —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –∑–∞–¥–∞—á.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å API.
"""

import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Optional

import requests

from radiator.core.config import settings
from radiator.core.database import SessionLocal
from radiator.models.tracker import TrackerTask


class LinksAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π"""

    def __init__(self):
        self.headers = {
            "Authorization": f"OAuth {settings.TRACKER_API_TOKEN}",
            "X-Org-ID": settings.TRACKER_ORG_ID,
            "Content-Type": "application/json",
        }
        self.base_url = settings.TRACKER_BASE_URL
        self.request_delay = 0.1

    def _make_request(self, url: str, method: str = "GET", **kwargs):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            response = requests.request(method, url, headers=self.headers, **kwargs)
            response.raise_for_status()
            time.sleep(self.request_delay)
            return response
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def get_task_links(self, task_key: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –∑–∞–¥–∞—á–∏"""
        try:
            url = f"{self.base_url}issues/{task_key}/links"
            response = self._make_request(url)
            return response.json()
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –¥–ª—è {task_key}: {e}")
            return None

    def get_task_links_batch(
        self, task_keys: List[str], max_workers: int = 10
    ) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        results = {}
        total = len(task_keys)

        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_key = {
                executor.submit(self.get_task_links, key): key for key in task_keys
            }

            completed = 0
            for future in as_completed(future_to_key):
                task_key = future_to_key[future]
                completed += 1

                try:
                    links = future.result()
                    results[task_key] = links if links else []

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–¥–∞—á
                    if completed % 10 == 0 or completed == total:
                        print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} –∑–∞–¥–∞—á")

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {task_key}: {e}")
                    results[task_key] = []

        return results

    def test_expand_in_get_task(self, task_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É expand=links –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        try:
            url = f"{self.base_url}issues/{task_key}"
            response = self._make_request(url, params={"expand": "links"})
            task_data = response.json()
            return "links" in task_data
        except:
            return False

    def test_expand_in_search(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É expand=links –≤ –ø–æ–∏—Å–∫–µ"""
        try:
            url = f"{self.base_url}issues/_search"
            params = {"expand": "links", "perPage": 2}
            post_data = {"filter": {"queue": "CPO"}}

            response = self._make_request(
                url, method="POST", json=post_data, params=params
            )
            results = response.json()

            if results and len(results) > 0:
                return "links" in results[0]
            return False
        except:
            return False


def analyze_links(results: Dict[str, List[Dict]]) -> None:
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô:")
    print("=" * 80)

    total_tasks = len(results)
    tasks_with_links = len([k for k, v in results.items() if v and len(v) > 0])
    total_links = sum(len(v) for v in results.values() if v)

    # –ü–æ–¥—Å—á–µ—Ç FULLSTACK —Å–≤—è–∑–µ–π
    fullstack_tasks = 0
    fullstack_links_count = 0
    relates_links = 0
    outward_links = 0

    examples = []

    for task_key, links in results.items():
        if not links:
            continue

        task_fs_links = []
        for link in links:
            link_type = link.get("type", {}).get("id", "")
            direction = link.get("direction", "")
            queue = link.get("object", {}).get("queue", {}).get("key", "")
            linked_key = link.get("object", {}).get("key", "")

            if queue == "FULLSTACK":
                fullstack_links_count += 1
                if link_type == "relates" and direction == "outward":
                    task_fs_links.append(linked_key)

            if link_type == "relates":
                relates_links += 1
            if direction == "outward":
                outward_links += 1

        if task_fs_links:
            fullstack_tasks += 1
            if len(examples) < 5:
                examples.append((task_key, task_fs_links))

    print(f"  –í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_tasks}")
    print(
        f"  –ó–∞–¥–∞—á —Å–æ —Å–≤—è–∑—è–º–∏: {tasks_with_links} ({tasks_with_links/total_tasks*100:.1f}%)"
    )
    print(f"  –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –Ω–∞–π–¥–µ–Ω–æ: {total_links}")
    print(f"")
    print(f"  üéØ –°–≤—è–∑–∏ —Å –æ—á–µ—Ä–µ–¥—å—é FULLSTACK: {fullstack_links_count}")
    print(f"  üîó –°–≤—è–∑–∏ —Ç–∏–ø–∞ 'relates': {relates_links}")
    print(f"  ‚û°Ô∏è  –°–≤—è–∑–∏ 'outward': {outward_links}")
    print(f"")
    print(
        f"  üìù CPO –∑–∞–¥–∞—á —Å FULLSTACK —Å–≤—è–∑—è–º–∏: {fullstack_tasks} ({fullstack_tasks/total_tasks*100:.1f}%)"
    )

    if examples:
        print(f"\n  –ü—Ä–∏–º–µ—Ä—ã CPO ‚Üí FULLSTACK —Å–≤—è–∑–µ–π:")
        for cpo_key, fs_keys in examples:
            print(f"    {cpo_key} ‚Üí {', '.join(fs_keys[:3])}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üöÄ" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –°–í–Ø–ó–ï–ô –ó–ê–î–ê–ß (STANDALONE)")
    print("üöÄ" * 40)

    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    db = SessionLocal()
    cpo_tasks = (
        db.query(TrackerTask.key).filter(TrackerTask.key.like("CPO%")).limit(50).all()
    )
    task_keys = [t[0] for t in cpo_tasks]
    db.close()

    if not task_keys:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ CPO –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    print(f"\nüìù –ù–∞–π–¥–µ–Ω–æ {len(task_keys)} CPO –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"   –ü—Ä–∏–º–µ—Ä—ã: {task_keys[:5]}")

    tester = LinksAPITester()

    # ===== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ expand –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ =====
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ expand=links")
    print("=" * 80)

    test_key = task_keys[0]
    print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º expand –≤ GET /issues/{test_key}...")
    expand_in_get = tester.test_expand_in_get_task(test_key)

    print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º expand –≤ POST /issues/_search...")
    expand_in_search = tester.test_expand_in_search()

    print(f"\n  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(
        f"    expand –≤ GET /issues/{{key}}: {'‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø' if expand_in_get else '‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}"
    )
    print(
        f"    expand –≤ POST /issues/_search: {'‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø' if expand_in_search else '‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}"
    )

    # ===== –¢–ï–°–¢ 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞ 5 –∑–∞–¥–∞—á–∞—Ö) =====
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (5 –∑–∞–¥–∞—á)")
    print("=" * 80)

    sequential_keys = task_keys[:5]
    start_time = time.time()

    sequential_results = {}
    for i, key in enumerate(sequential_keys, 1):
        print(f"  [{i}/5] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è {key}...")
        links = tester.get_task_links(key)
        sequential_results[key] = links if links else []

    sequential_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {sequential_time:.2f} —Å–µ–∫")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {sequential_time/5:.2f} —Å–µ–∫")

    # ===== –¢–ï–°–¢ 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ batch –∑–∞–ø—Ä–æ—Å—ã =====
    print("\n" + "=" * 80)
    print(f"–¢–ï–°–¢ 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ batch –∑–∞–ø—Ä–æ—Å—ã ({len(task_keys)} –∑–∞–¥–∞—á)")
    print("=" * 80)

    start_time = time.time()
    batch_results = tester.get_task_links_batch(task_keys, max_workers=10)
    batch_time = time.time() - start_time

    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {batch_time:.2f} —Å–µ–∫")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {batch_time/len(task_keys):.2f} —Å–µ–∫")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analyze_links(batch_results)

    # ===== –ò–¢–û–ì–ò =====
    print("\n" + "=" * 80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 80)

    if sequential_time > 0:
        speedup = (sequential_time / 5 * len(task_keys)) / batch_time
        print(
            f"  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ 50 –∑–∞–¥–∞—á): ~{sequential_time/5*len(task_keys):.1f} —Å–µ–∫"
        )
        print(f"  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (batch): {batch_time:.1f} —Å–µ–∫")
        print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {speedup:.1f} —Ä–∞–∑")

    print("\n" + "=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ê")
    print("=" * 80)

    if expand_in_get or expand_in_search:
        print("  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ expand=links –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("     ‚Üí –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏")
        print("     ‚Üí –£–º–µ–Ω—å—à–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
    else:
        print("  ‚ö†Ô∏è  expand=links –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        print("     ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch-–∑–∞–ø—Ä–æ—Å—ã —Å ThreadPoolExecutor")

    print("\n  üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:")
    print("     1. –ü–æ–ª—É—á–∞—Ç—å —Å–≤—è–∑–∏ batch-–∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print("     2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤—è–∑–∏ –≤ –ë–î (–º–æ–¥–µ–ª—å TrackerTaskLink)")
    print("     3. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —á–∏—Ç–∞—Ç—å –∏–∑ –ë–î")
    print(
        f"     4. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π –¥–ª—è 100 –∑–∞–¥–∞—á: ~{batch_time*2:.1f} —Å–µ–∫"
    )

    print("\n" + "üèÅ" * 40 + "\n")


if __name__ == "__main__":
    main()
