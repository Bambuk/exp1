"""Remove items table and related functionality

Revision ID: d0701f4164ab
Revises: 5d4313ca2c02
Create Date: 2025-08-28 00:54:13.979233

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "d0701f4164ab"
down_revision = "5d4313ca2c02"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if table exists before dropping
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    tables = inspector.get_table_names()

    if "items" in tables:
        # Check if indexes exist before dropping
        indexes = inspector.get_indexes("items")
        index_names = [idx["name"] for idx in indexes]

        if "ix_items_id" in index_names:
            op.drop_index(op.f("ix_items_id"), table_name="items")
        if "ix_items_title" in index_names:
            op.drop_index(op.f("ix_items_title"), table_name="items")

        op.drop_table("items")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "items",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "image_url", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("is_available", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name=op.f("items_owner_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("items_pkey")),
    )
    op.create_index(op.f("ix_items_title"), "items", ["title"], unique=False)
    op.create_index(op.f("ix_items_id"), "items", ["id"], unique=False)
    # ### end Alembic commands ###
